{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/utils/patterns.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","validator","isValid","setIsValid","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","htmlFor","type","classNames","event","target","onBlur","isValidValue","onValidate","pattern","validationUrl","string","test","NewMovie","onAdd","count","setCount","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","isImgUrlValid","setIsImgUrlValid","isImdbIdValid","setIsImdbIdValid","isAllChackedFieldsValid","Boolean","isAllowSubmit","onSubmit","newMovie","current","str","disabled","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c0a95ed2.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  validator?: (url: string) => boolean;\n  isValid?: boolean;\n  setIsValid?: (state: boolean) => void;\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => { },\n  validator,\n  isValid,\n  setIsValid,\n\n}) => {\n  // generade a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  // const [validationError, setValidationError] = useState(false);\n  const hasError = touched && required && !value;\n\n  const onValidate = () => {\n    if (validator && setIsValid) {\n      const isValidValue = validator(value);\n\n      if (!isValidValue) {\n        setIsValid(true);\n      }\n\n      if (isValidValue) {\n        setIsValid(false);\n      }\n    }\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={\n            (event) => onChange(event.target.value)\n          }\n          onBlur={() => {\n            onValidate();\n            setTouched(true);\n          }}\n        />\n      </div>\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n      {(!hasError && isValid) && (\n        <p className=\"help is-danger\">{`${label} is not correct`}</p>\n      )}\n    </div>\n  );\n};\n","// eslint-disable-next-line max-len\nexport const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\nimport { pattern } from '../utils/patterns';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nconst validationUrl = (string: string): boolean => {\n  return pattern.test(string);\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n  const [isImgUrlValid, setIsImgUrlValid] = useState(false);\n  const [isImdbIdValid, setIsImdbIdValid] = useState(false);\n\n  const isAllChackedFieldsValid = Boolean(!isImgUrlValid && !isImdbIdValid);\n  const isAllowSubmit = Boolean(title && imgUrl && imdbUrl && imdbId\n    && isAllChackedFieldsValid);\n\n  const addMovie = () => {\n    const newMovie: Movie = {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    setCount(current => current + 1);\n\n    onAdd(newMovie);\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={addMovie}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={(str) => setTitle(str)}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={(str) => setDescription(str)}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={(str) => setImgUrl(str)}\n        validator={validationUrl}\n        isValid={isImgUrlValid}\n        setIsValid={setIsImgUrlValid}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={(str) => setImdbUrl(str)}\n        validator={validationUrl}\n        isValid={isImdbIdValid}\n        setIsValid={setIsImdbIdValid}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={(str) => setImdbId(str)}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isAllowSubmit}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>(moviesFromServer);\n\n  const addMovie = (movie: Movie): void => {\n    setMovies(current => [...current, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}